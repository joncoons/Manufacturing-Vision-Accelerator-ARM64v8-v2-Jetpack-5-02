# FROM visionaccelerator.azurecr.io/edge_base/arm64v8/l4t_pytorch_cv2src_ort_152:0.0.1-arm64v8

FROM nvcr.io/nvidia/l4t-cuda:11.4.14-runtime

ARG DEBIAN_FRONTEND=noninteractive
ARG INSTALL_FOLDER=cv2_files
ENV runtime=nvidia
ENV OPENBLAS_CORETYPE=ARMV8:$OPENBLAS_CORETYPE
ENV LD_PRELOAD=/usr/lib/aarch64-linux-gnu/libgomp.so.1:$LD_PRELOAD
ENV LD_LIBRARY_PATH=/usr/local/cuda-10.2/lib64:$LD_LIBRARY_PATH
ENV PATH=/usr/local/cuda-10.2/bin:$PATH
ENV PATH=/usr/lib/aarch64-linux-gnu:$PATH
ENV PYTHONPATH=$PYTHONPATH:/app/inference

COPY qemu-aarch64-static /usr/bin/qemu-aarch64-static
RUN cd /usr/bin && chmod a+rwx qemu-aarch64-static

# Create folder structure and set permissions
# When combined with deployment manifest, an edge_assets directory will be created on the host device
RUN mkdir /model_volume && chmod -R 777 /model_volume
RUN mkdir /images_volume && chmod -R 777 /images_volume
RUN mkdir /image_sink_volume && chmod -R 777 /image_sink_volume
RUN mkdir /config && chmod -R 777 /config

RUN apt update -y
RUN apt install -y --no-install-recommends -y software-properties-common wget 
RUN add-apt-repository universe && add-apt-repository multiverse && add-apt-repository restricted && add-apt-repository main

RUN apt update

RUN wget http://launchpadlibrarian.net/516139268/libjasper1_1.900.1-debian1-2.4ubuntu1.3_arm64.deb \
    && wget http://launchpadlibrarian.net/516139264/libjasper-dev_1.900.1-debian1-2.4ubuntu1.3_arm64.deb \
    && dpkg -i libjasper1_1.900.1-debian1-2.4ubuntu1.3_arm64.deb \
    && dpkg -i libjasper-dev_1.900.1-debian1-2.4ubuntu1.3_arm64.deb \
    && apt update && rm -f *.deb

RUN apt install --no-install-recommends -y \
    libgfortran4 \
    libopenblas-base \
    libopenmpi-dev \
    libomp-dev \
    build-essential \
    cmake \
    libgtk2.0-dev \
    pkg-config \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    python3-dev \
    python-dev \
    python-numpy \
    python3-numpy \
    python3-pip \
    libtbb2 \
    libtbb-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libjasper-dev \
    libdc1394-22-dev \
    libwebp-dev \
    libv4l-dev \
    v4l-utils \
    qv4l2 \
    # v4l2ucp \
    curl \
    unzip \
    libgeos-dev \
    && rm -rf /var/lib/apt/lists/*

RUN mkdir -p ${INSTALL_FOLDER}
RUN cd ${INSTALL_FOLDER} && curl -L \
    https://github.com/opencv/opencv/archive/4.5.1.zip -o opencv-4.5.1.zip \
    && curl -L https://github.com/opencv/opencv_contrib/archive/4.5.1.zip -o opencv_contrib-4.5.1.zip \
    && unzip opencv-4.5.1.zip && unzip opencv_contrib-4.5.1.zip 

RUN mkdir -p ${INSTALL_FOLDER}/opencv-4.5.1/release \
    && cd ${INSTALL_FOLDER}/opencv-4.5.1/release \
    && cmake -D WITH_CUDA=ON -D ENABLE_PRECOMPILED_HEADERS=OFF \
    -D CUDA_ARCH_BIN="7.2" -D CUDA_ARCH_PTX="" \
    -D OPENCV_EXTRA_MODULES_PATH=../../opencv_contrib-4.5.1/modules \
    -D WITH_GSTREAMER=ON -D WITH_LIBV4L=ON -D BUILD_opencv_python2=ON \
    -D BUILD_opencv_python3=ON -D BUILD_TESTS=OFF -D BUILD_PERF_TESTS=OFF \
    -D BUILD_EXAMPLES=OFF -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local ..
RUN cd ${INSTALL_FOLDER}/opencv-4.5.1/release \
    && make -j8 \
    && make install
RUN sh -c 'echo "/usr/local/lib" >> /etc/ld.so.conf.d/opencv.conf' \
    && ldconfig

RUN rm -rf ${INSTALL_FOLDER} \
    && apt autoremove --purge \
    && apt clean

ENV PATH=/usr/local/cuda/bin:${PATH}

RUN wget -qO- "https://github.com/Kitware/CMake/releases/download/v3.23.3/cmake-3.23.3-linux-aarch64.tar.gz" | tar --strip-components=1 -xz -C /usr/local

RUN python3 -m pip install --upgrade pip wheel setuptools
RUN python3 -m pip install protobuf~=3.17.3
RUN python3 -m pip install pybind11 pytest
RUN python3 -m pip install Cython pillow 
RUN python3 -m pip install azure-iot-device~=2.7.0 shapely
RUN python3 -m pip install mysql-connector-python
RUN python3 -m pip install scipy requests
RUN pip3 install onnxruntime==1.12.1


# Get ONNX runtime from Nvidia Jetson Zoo https://elinux.org/Jetson_Zoo
# RUN apt update && apt install -y --no-install-recommends \
#     git gcc g++ make ca-certificates libprotobuf-dev protobuf-compiler\
#     && rm -rf /var/lib/apt/lists/*

# RUN wget -qO- "https://github.com/Kitware/CMake/releases/download/v3.23.3/cmake-3.23.3-linux-aarch64.tar.gz" | tar --strip-components=1 -xz -C /usr/local

# COPY /onn  git clone --recursive https://github.com/Microsoft/onnxruntime
# RUN  chmod -R 777 /onnxruntime 
# RUN /onnxruntime/build.sh --config Release --update --build --parallel --build_wheel \
#     --use_cuda --cuda_home /usr/local/cuda --cudnn_home /usr/lib/aarch64-linux-gnu
# RUN cd /onnxruntime/build/Linux/Release && python3 -m pip install *.whl
# RUN wget https://github.com/microsoft/onnxruntime/releases/download/v1.12.1/onnxruntime-linux-aarch64-1.12.1.tgz -O onnxruntime-linux-aarch64-1.12.1.tgz && \
#     tar -xvf onnxruntime-linux-aarch64-1.12.1.tgz && \
#     rm -rf onnxruntime-linux-aarch64-1.12.1.tgz

# RUN mkdir /onnxruntime && chmod 777 /onnxruntime
# RUN cd onnxruntime && wget https://nvidia.box.com/shared/static/2sv2fv1wseihaw8ym0d4srz41dzljwxh.whl && \
#     python3 -m pip install *.whl 
# RUN rm -rf onnxruntime

# # Get PyTorch runtime from Nvidia Jetson Zoo https://elinux.org/Jetson_Zoo

RUN wget https://developer.download.nvidia.com/compute/redist/jp/v50/pytorch/torch-1.12.0a0+2c916ef.nv22.3-cp38-cp38-linux_aarch64.whl 
RUN python3 -m pip install torch-1.12.0a0+2c916ef.nv22.3-cp38-cp38-linux_aarch64.whl
RUN rm -rf torch-1.12.0a0+2c916ef.nv22.3-cp38-cp38-linux_aarch64.whl

# WORKDIR /onnxruntime

# ARG WHEEL_FILE=onnxruntime_gpu-1.5.2-cp36-cp36m-linux_aarch64.whl

# COPY ${WHEEL_FILE} .

# RUN basename ${WHEEL_FILE} | xargs pip3 install 


# Shapely prereq
# RUN apt update && apt install -y --no-install-recommends \
#     libgeos-dev && \
#     rm -rf /var/lib/apt/lists/*

# Comment out if not using ACV->ONNX
# RUN apt install -y --no-install-recommends \
#     libprotobuf-dev protobuf-compiler && \
#     rm -rf /var/lib/apt/lists/*

# Comment out if not using Allied Vision camera
COPY VimbaSDK/Vimba_v5.1_ARM64.tgz /opt
RUN cd /opt && tar -zxvf Vimba_v5.1_ARM64.tgz && rm -rf *.tgz
RUN cd /opt/Vimba_5_1/VimbaGigETL && ./Install.sh
ENV GENICAM_GENTL64_PATH="/opt/Vimba_5_1/VimbaGigETL/CTI/arm_64bit"
RUN echo "$GENICAM_GENTL64_PATH"
RUN cd /opt/Vimba_5_1/Tools/Viewer/Bin/arm_64bit && chmod +x libVimbaC.so && chown root:root libVimbaC.so 
RUN cp /opt/Vimba_5_1/Tools/Viewer/Bin/arm_64bit/libVimbaC.so /usr/lib/aarch64-linux-gnu

# ONNX & ONNX runtime, OpenCV foundational packages
# RUN python3 -m pip install pybind11 pytest
# RUN python3 -m pip install cython pillow 
# RUN python3 -m pip install azure-iot-device~=2.7.0 shapely
# RUN python3 -m pip install mysql-connector-python

# Comment out if not using YOLOv5->ONNX
# RUN python3 -m pip install scipy requests

# Comment out if not using ACV->ONNX
# RUN python3 -m pip install onnx==1.8.1

# Comment out if not using Basler
# RUN python3 -m pip install pypylon

# Comment out if not using Allied Vision camera
#Pulled from https://stackoverflow.com/questions/55313610/importerror-libgl-so-1-cannot-open-shared-object-file-no-such-file-or-directo
# RUN apt clean
# RUN apt update && apt install -y --no-install-recommends \
#     ffmpeg \
#     libsm6 \
#     libxext6 && \
#     rm -rf /var/lib/apt/lists/*
# /////////////////////////////////////////

WORKDIR /app

COPY /app/ .

RUN ldconfig

CMD [ "python3", "-u", "./main.py" ]
